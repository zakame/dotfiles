;;;_ + Mail/News Set up

(setq gnus-select-method
      '(nntp "news.eternal-september.org"
             (nntp-authinfo-file "~/.authinfo.gpg")
             (nntp-port-number 563)
             (nntp-open-connection-function nntp-open-tls-stream)))
      ;; gnus-secondary-select-methods
      ;; '((nnml "")
      ;;   (nnimap "zakame.net"
      ;;           (nnimap-address "mail.zakame.net"))
      ;;   (nnimap "elep.name"
      ;;           (nnimap-address "mail.zakame.net"))))
;;         (nnimap "mor.ph"
;;                 (nnimap-address "imap.gmail.com")
;;                 (nnimap-stream ssl))
        ;; (nnimap "free.net.ph"
        ;;         (nnimap-address "imap.gmail.com")
        ;;         (nnimap-stream ssl))))

(setq gnus-read-active-file nil
      gnus-check-new-newsgroups "ask-server"
      gnus-check-bogus-newsgroups nil
      gnus-nov-is-evil nil)

;; (setq mail-sources
;;       '((file :path "/var/mail/zakame")))

;; (defun zakame/smtpmail-smtp-credentials (server service &optional login)
;;   "Set `smtpmail-smtp-server', `smtpmail-smtp-service', and
;; `smtpmail-starttls-credentials' variables according to the
;; given parameters.

;; This function only provides public credentials; passwords are
;; in `~/.authinfo'."
;;   (setq smtpmail-smtp-server server
;;         smtpmail-smtp-service service
;;         smtpmail-starttls-credentials
;;         (list (list smtpmail-smtp-server smtpmail-smtp-service nil nil))))

(setq gnus-posting-styles
      '((".*"
         (organization "Zakame.Net")
         ;; (eval (zakame/smtpmail-smtp-credentials "mail.zakame.net" 587))
         (signature "  I like the idea of 256 bits, though: 32 for the (Unicode) character leaves\n  room for 224 Bucky bits, which ought to be enough for anyone.\n\t\t\t\t-- Roland Hutchinson, in alt.folklore.computers"))
        ("elep.name"
         (address "zak@elep.name")
         ;; (eval (zakame/smtpmail-smtp-credentials "mail.zakame.net" 587))
         (organization "Elep Family"))
;;         ("mor.ph"
;;          (address "zakame@mor.ph")
;;          (eval (zakame/smtpmail-smtp-credentials "smtp.gmail.com" 587))
;;          (organization "Morph Labs")
;;          (signature "Zak B. Elep\nSystems Administrator\nMorph Labs, Inc.\nzakame@mor.ph\nwww.morphexchange.com\nMobile number: +63 921 407 13 13"))
        ("free.net.ph"
         (address "zakame@free.net.ph")
         ;; (eval (zakame/smtpmail-smtp-credentials "smtp.gmail.com" 587))
         (organization "Free Network Group"))))

(add-hook 'message-setup-hook 'footnote-mode)
(add-hook 'message-sent-hook 'gnus-score-followup-thread)

;; (require 'smtpmail)
;; (setq send-mail-function 'smtpmail-send-it
;;       message-send-mail-function 'smtpmail-send-it
;;       starttls-use-gnutls t
;;       starttls-gnutls-program "gnutls-cli"
;;       starttls-extra-arguments nil
;;       smtpmail-smtp-server "mail.zakame.net"
;;       smtpmail-smtp-service 587
;;       smtpmail-auth-credentials "~/.authinfo"
;;       smtpmail-starttls-credentials
;;       (list (list smtpmail-smtp-server smtpmail-smtp-service nil nil))
;;       smtpmail-debug-info t
;;       smtpmail-debug-verb t)


;;;_ + Look and Feel

;; Topic Mode
;;(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

;; Show only the headers I want
(setq gnus-visible-headers
      (concat "^From:\\|^Newsgroups:\\|^Subject:\\|^Date:\\|^Followup-To:"
              "\\|^Reply-To:\\|^Organization:\\|^Summary:\\|^Keywords:"
              "\\|^To:\\|^[BGF]?Cc:\\|^Posted-To:\\|^Mail-Copies-To:"
              "\\|^Mail-Followup-To:\\|^Apparently-To:\\|^Gnus-Warning:"
              "\\|^Resent-From:\\|^X-Sent:\\|^User-Agent:"))
;;;_ + Formatting

(setq gnus-group-line-format "%P%m%M%L%5N/%-5R %25G: %D\n"
      gnus-topic-line-format "%i%n %A (%G) %v\n"
      gnus-summary-line-format "%z%U%R%4N %d %(%4L: %-20,20n%) %I%S\n"
      gnus-summary-mode-line-format "Gnus: %%b [%A] %Z")


;;;_ + MIME

;; (setq gnus-show-mime t)

;; Show the text/plain part of a multipart
(setq mm-discouraged-alternatives
      '("text/html"
        "text/richtext"
        "multipart/related"))

(eval-after-load "gnus-art"
  '(setq gnus-article-treat-types
         (cons "text/html" gnus-article-treat-types)))

;; Always show text even if its html
(setq mm-automatic-display
      (remove "text/html" mm-automatic-display))

;; Inline images
(setq mm-attachment-override-types '("image/.*"))

;; Use AntiWord!
;; (add-to-list 'mm-inline-media-tests
;;              '("application/msword" mm-inline-text identity))
;; (add-to-list 'mm-automatic-external-display "application/msword")
;; (add-to-list 'mm-attachment-override-types "application/msword")
;; (add-to-list 'mm-automatic-display "application/msword")


;;;_ + PGP

(autoload 'pgg-encrypt-region "pgg"
  "Encrypt the current region." t)
(autoload 'pgg-encrypt-symmetric-region "pgg"
  "Encrypt the current region with symmetric algorithm." t)
(autoload 'pgg-decrypt-region "pgg"
  "Decrypt the current region." t)
(autoload 'pgg-sign-region "pgg"
  "Sign the current region." t)
(autoload 'pgg-verify-region "pgg"
  "Verify the current region." t)
(autoload 'pgg-insert-key "pgg"
  "Insert the ASCII armored public key." t)
(autoload 'pgg-snarf-keys-region "pgg"
  "Import public keys in the current region." t)

(setq pgg-scheme 'gpg)

(setq mm-verify-option 'known)
(setq mm-decrypt-option 'known)

(setq gnus-buttonized-mime-types
      '("multipart/encrypted" "multipart/signed"))

;; Automatically sign mail
;; (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)

;; How long to remember...
(setq pgg-passphrase-cache-expiry 300)

;; Inline display fo signed messages...
;; (eval-after-load "mm-decode"
;;   '(add-to-list 'mm-inlined-types "application/pgp$"))
;; ;; Display when requested
;; (eval-after-load "mm-decode"
;;   '(add-to-list 'mm-inline-media-tests '("application/pgp$"
;;                                          mm-inline-text
;;                                          identity)))
;; (eval-after-load "mm-decode"
;;   '(add-to-list 'mm-automatic-display "application/pgp$"))


;;;_ + Emacs-W3M

;; (condition-case err
;;     (progn
;;       (require 'w3m-load))
;;   (error
;;    (message "Can't open w3m-load: %s" (cdr err))))
;; (setq mm-text-html-renderer 'w3m)
;; (setq mm-inline-html-with-images t)
;; (setq gnus-article-wash-function 'gnus-article-wash-html-with-w3m)


;;;_ + Misc

;; No confirming on exit
(setq gnus-interactive-exit nil)

;; Use adaptive scoring
(setq gnus-use-scoring t)
(setq gnus-use-adaptive-scoring '(word line))

;; FIXME: Check if the weights are right
(setq gnus-default-adaptive-score-alist
      '((gnus-unread-mark)
        (gnus-ticked-mark (from 4))
        (gnus-dormant-mark (from 5))
        (gnus-del-mark (from -4) (subject -1))
        (gnus-read-mark (from 4) (subject 2))
        (gnus-expirable-mark (from -1) (subject -1))
        (gnus-killed-mark (from -1) (subject -3))
        (gnus-kill-file-mark)
        (gnus-ancient-mark)
        (gnus-low-score-mark)
        (gnus-catchup-mark (from -1) (subject -1))))

;; Add article duplicate suppression
(setq gnus-save-duplicate-list nil)

;; Work as an Agent
(setq gnus-agent t)

;; Daemons
(require 'gnus-demon)
(gnus-demon-add-handler 'gnus-group-get-new-news 10 nil)
(gnus-demon-init)
