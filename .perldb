# -*- mode: perl -*-

=head1 NAME

.perldb - Customize your Perl debugger

=head1 USAGE

Save this file in your home directory as C<.perldb>. When you run the Perl
debugger on some code (C<< perl -d some_code.pl >>), it will read this file
and use it to customize your debugger experience.

=head1 FEATURES

=head2 $DB::deep

This number tells the Perl debugger to automatically break at a certain
recursion depth. By default this is 100. Code using heavy recursion often goes
much higher. We set this to 5,000 to avoid having the debugger constantly
halting in recursive functions.

=head2 DB::Skip

We use this module to have the debugger automatically skip over the internals
of many modules we don't actually want to debug (such as getting lost in the
guts of Moose).

=head2 {{v

The C<{{> command tells the debugger to run the command that follows before
every prompt. In this case, we use the "v"erbose command. With this, instead
of seeing a single line of code at a time, we get a verbose window of several
lines of code, making it much easier to see our context:

    28          );
    29:         $DB::single = 1;
    30 
    31==>       $winston->update( { wallet => 10 } );
    32:         $winston->bank_account->update(
    33              {   credits => 100,
    34                  debits  => 0,
    35              }
    36          );
    37:         $winston->clear_messages;

The C<< ==> >> points to the line of code we're about to run.

=head2 p

We've highjacked this command to give a "flatter" version of dumping. For
example, if you run C<< x $object >> on a C<DBIx::Class> object, you'll get
hundreds of lines of unreadable output. We actually provide a much flatter
output making it easier to read and see the data you need. If your computer
supports C<Term::ANSIColor>, we colorize certain bits, too.

See
L<http://blogs.perl.org/users/ovid/2017/03/using-the-perl-debugger-with-dbixclass.html>
for more information.

=cut

# vim: ft=perl

package My::Debugger::Helper {
    use Data::Dumper ();
    use Scalar::Util qw(looks_like_number blessed reftype);
    my $rc = eval { require Term::ANSIColor; 1; };
    my $HAVE_TERM_ANSI_COLOR = $rc;
    $rc = eval { require Perl::Tidy; 1; };
    my $HAVE_PERL_TIDY = $rc;

    sub colored {
        my ( $color, $message ) = @_;
        if ($HAVE_TERM_ANSI_COLOR) {
            return Term::ANSIColor::colored(@_);
        }
        return $message;
    }

    sub Dumper {
        local $Data::Dumper::Indent   = 1;
        local $Data::Dumper::Sortkeys = 1;
        local $Data::Dumper::Terse    = 1;
        my $thing  = shift;
        my $output = Data::Dumper::Dumper($thing);
        return $output unless $HAVE_PERL_TIDY;

        my ( $tidied, $stderr );

        # Prevents the error: You may not specify any filenames when a
        # source array is given That's because even when we use this
        # interface directly, Perl::Tidy checks to see if @ARGV has
        # any filenames.
        local @ARGV;
        my $error = Perl::Tidy::perltidy(
            source      => \$output,
            destination => \$tidied,
            stderr      => \$stderr,
        );
        if ($error) {
            die "Perl::Tidy ERROR: $stderr";
        }
        return $tidied;
    }

    sub show {
        my $thing = shift;
        # require Data::Printer;
        # return Data::Printer::p( $thing, colored => 1, return_value => 'dump' );
        my $ref = ref $thing or return $thing;
        my $result;
        if ( blessed $thing ) {
            if ( 'HASH' eq reftype $thing ) {
                my $message = "Class: $ref";
                $result = join "\n" => colored(
                    ['bright_red on_black'],
                    $message
                  ),
                  Dumper( _dflat_hash($thing) );
            }
            else {
                $result = _stringify($thing);
            }
        }
        if ( 'HASH' eq $ref ) {
            $result = Dumper( _dflat_hash($thing) );
        }
        elsif ( 'ARRAY' eq $ref ) {
            $result = Dumper( _dflat_array($thing) );
        }
        return $result;
    }

    sub _dflat_hash {
        my $hashref = shift;
        my %hash;
        while ( my ( $k, $v ) = each %$hashref ) {
            my $ref = ref $v;
            if ( 'HASH' eq $ref ) {
                $v = _dflat_hash($v);
            }
            elsif ( 'ARRAY' eq $ref ) {
                $v = _dflat_array($v);
            }
            else {
                $v = _stringify($v);
            }
            $hash{$k} = $v;
        }
        return \%hash;
    }

    sub _dflat_array {
        my $arrayref = shift;
        my @array;
        foreach my $element (@$arrayref) {
            my $ref = ref $element;
            if ( 'HASH' eq $ref ) {
                $element = _dflat_hash($element);
            }
            elsif ( 'ARRAY' eq $ref ) {
                $element = _dflat_array($element);
            }
            else {
                $element = _stringify($element);
            }
            push @array => $element;
        }
        return \@array;
    }

    sub _stringify {
        my $thing = shift;
        return
            blessed $thing ? colored( ['bold blue'], "$thing" )
          : looks_like_number($thing) ? $thing
          :                             "$thing";
    }
}

$DB::deep = 5000;
my $skip;
my @classes;

BEGIN {
    @classes = sort ( 'Catalyst',
        'Moo',
        'Moose',
        'Method::Generate::',
        'DateTime::Format',
        'DBIx::Class',
        'Eval::Closure',
        'Class::MOP',
        'Attribute::Handlers',
        'SQL::Abstract',
        'Sub::Defer',
        'Sub::Uplevel',
        'Sub::Quote',
        'Test::',
        'Test2::',
        'Try::Tiny',
        'mro',
        'strict',
        'warnings',
        'Exporter',
        'Class::Accessor',
    );
    if ( $ENV{DB_ALLOW} ) {
        if ( ':all' eq $ENV{DB_ALLOW} ) {
            @classes = ();
        }
        else {
            @classes = grep { !/$ENV{DB_ALLOW}/ } @classes;
        }
    }
    my $classes = join "\n    " => @classes;
    my $re      = join '|'      => @classes;
    $skip = "^(?:$re)";
    print STDERR <<"END" unless $ENV{NO_DB_SKIP};

Debugger skipping:

    $classes

See ~/.perldb if you don't like this behavior, or set NO_DB_SKIP=1

END
}

unless ( $ENV{NO_DB_SKIP} ) {
    eval "use DB::Skip pkgs => [qr/$skip/]" if @classes;
}

sub DB::afterinit {
    no warnings 'once';

    # give me a window of lines instead of a single line, except in the OTE
    unless ($ENV{INSIDE_EMACS}) {
        push @DB::typeahead => "{{v"
            unless $DB::already_curly_curly_v++;
    }

    # quick 'n dirty dumped data structure # stringifies anything which is not
    # a hash or array reference so you can see the structure of your data
    $DB::alias{p}
      = 's/^\s*p/My::Debugger::Helper::show/; eval "print {\$DB::OUT} $cmd"';
}
